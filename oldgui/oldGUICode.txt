struct Setting {

    string name;
    float delta;
    int rule;
    float* val;
    function<void()> action;

    vector<string> mappedVals = vector<string>(0);

    string shaderVar;

    Text settingText;
    Text valText;

    Setting(string name, float* val, float delta, int rule, vector<string> mappedVals, function<void()> action) : Setting(name, val, delta, rule, action) {
        this->mappedVals = mappedVals;
    }

    Setting(string name, float* val, float delta, int rule, string shaderVar, function<void()> action) : Setting(name, val, delta, rule, action) {
        this->shaderVar = shaderVar;
    }

    Setting(string name, float* val, float delta, int rule, function<void()> action) {
        this->name = name;
        this->delta = delta;
        this->rule = rule;
        this->val = val;
        this->action = action;
    }

    void wrap(float min, float max) {
        if (*val < min) *val = max;
        if (*val > max) *val = min;
    }

    void wrapInMap() {
        if (*val < 0) *val = mappedVals.size();
        if (*val >= mappedVals.size()) *val = 0;
    }

    void clamp(float min, float max) {
        if (*val < min) *val = min;
        if (*val > max) *val = max;
    }


};

struct SettingGroup {

    Text groupText;
    string name;
    vector<Setting> settings;

    SettingGroup(string name) : name(name) {}

};

string formatFloat(float f, int n) {
    float g = pow(10.0f,n);
    string s = to_string(roundf(f * g) / g);
    int delim = s.find(".");
    string front = s.substr(0, delim);
    if (n == 0) return front;
    string back = s.substr(delim + 1, s.length());
    if (back.length() > n) back = back.substr(0, back.length() - (back.length() - n));
    return front + "." + back;
}

string getSettingString(float val, int rule, vector<string> map) {
    //formatting rule: 0 - decimal number, 1 - scaled decimal, 2 - integer number, 3 - angle , 4 - boolean, 5 - mapped string
    if (rule == 5) {
        return map[(int)round(val)].substr(0, 6);
    }else if (rule == 4)
        return val > 0 ? "True" : "False";
    else if (rule == 3)
        return formatFloat(val * 180.0f / _Pi, 2) + (char) 248;
    else if (rule == 2)
        return to_string((int)val);
    else if (rule == 1)
        return formatFloat(val * 100.0f, 2);
    else
        return formatFloat(val, 2);
}



Vector2f previewPos(100, 450);
    vector<ConvexShape> searchPreview = { ConvexShape(), ConvexShape(), ConvexShape() };
    updatePreview(searchPreview, previewPos, 50);

    int currentSetting = 0;
    int currentGroup = 0;
    vector<SettingGroup> groups = {
        SettingGroup("Agent Options"),
        SettingGroup("Shader Options"),
        SettingGroup("Color Options"),
        SettingGroup("Oscillation Options"),
        SettingGroup("Audio Visualization")
    };

    float useSimple = -1.0f;
    float useCuda = -1.0f;

    //settings manipulated by GUI
    //name, val pointer, change rate, format rule, ? shader uniform name, function called on val change
    //formatting rule: 0 - decimal number, 1 - scaled decimal, 2 - integer number, 3 - angle , 4 - boolean, 5 mapped to string vector
    groups[0].settings = {
        Setting("Agent Count:", &agentCount, 10, 2, [&]() {
            if (agentCount <= 0)
                agentCount == 1;
            else if (agentCount >= maxAgents)
                agentCount = maxAgents;
            while (agentList.size() < agentCount) {
                agentList.push_back(Agent());
                indices.push_back(agentList.size()-1);
            }
            while (agentList.size() > agentCount) {
                agentList.pop_back();
                indices.pop_back();
            }
        }),
        Setting("Speed:", &Agent::speed, 0.05f, 0, [&]() {}),
        Setting("Turn Factor:", &Agent::turnFactor, 0.01f, 0, [&]() {}),
        Setting("Randomness:", &Agent::randFactor, 0.05f, 0, [&]() {}),
        Setting("Bias:", &Agent::biasFactor, 0.05f, 0, [&]() {}),
        Setting("Repulsion:", &Agent::repulsion, 0.01f, 0, [&]() {}),

        Setting("Search Size:", &Agent::searchSize, 1.0f, 0, [&]() {
            if (useSimple > 0)
                Agent::generateNormTriangleSimple();
            else
                Agent::generateNormTriangle(maxPts);
        }),
        Setting("Search Angle:", &Agent::searchAngle, _Pi / 360.0f, 3, [&]() {
            if (useSimple > 0)
                Agent::generateNormTriangleSimple();
            else
                Agent::generateNormTriangle(maxPts);
            updatePreview(searchPreview, previewPos, 50);
        }),
        Setting("Angle Offset:", &Agent::searchAngleOffset, _Pi / 360.0f, 3, [&]() {
            updatePreview(searchPreview, previewPos, 50);
        }),
        Setting("Simple Search:", &useSimple, 0.0f, 4, [&]() {
            *groups[currentGroup].settings[currentSetting - 1].val *= -1.0f;
            if (useSimple > 0)
                Agent::generateNormTriangleSimple();
            else
                Agent::generateNormTriangle(maxPts);
        }),
        Setting("GPU Search:", &useCuda, 0.0f, 4, [&]() {
            if (cudaCapable) {
                *groups[currentGroup].settings[currentSetting - 1].val *= -1.0f;
            }
        }),
    };
    
    groups[1].settings = {
        Setting("Dim Rate:", &dimRate, 0.0001f, 1, "dimRate", [&]() {
            shader.setUniform(
                groups[currentGroup].settings[currentSetting - 1].shaderVar,
                *groups[currentGroup].settings[currentSetting - 1].val
            );
        }),
        Setting("Disperse:", &disperseFactor, 0.01f, 0, "disperseFactor", [&]() {
            shader.setUniform(
                groups[currentGroup].settings[currentSetting - 1].shaderVar,
                *groups[currentGroup].settings[currentSetting - 1].val
            );
        })
    };

    groups[2].settings = {
        Setting("PaletteR:", &Agent::palette.x, 0.01f, 0, [&]() {
            std::for_each(execution::par_unseq, agentList.begin(), agentList.end(), [&](auto&& a) {
                a.updateColor();
            });
        }),
        Setting("PaletteG:", &Agent::palette.y, 0.01f, 0, [&]() {
            std::for_each(execution::par_unseq, agentList.begin(), agentList.end(), [&](auto&& a) {
                a.updateColor();
            });
        }),
        Setting("PaletteB:", &Agent::palette.z, 0.01f, 0, [&]() {
            std::for_each(execution::par_unseq, agentList.begin(), agentList.end(), [&](auto&& a) {
                a.updateColor();
            });
        })
    };

    groups[3].settings = {
        Setting("Global:", &Agent::alternate, 0.0f, 4, [&]() {
            *groups[currentGroup].settings[currentSetting - 1].val *= -1.0f;
            colorAlternateTimer.restart();
        }),
        Setting("\tR Period:", &Agent::globalPeriodR, 0.1f, 0, [&]() {}),
        Setting("\tG Period:", &Agent::globalPeriodG, 0.1f, 0, [&]() {}),
        Setting("\tB Period:", &Agent::globalPeriodB, 0.1f, 0, [&]() {}),
        Setting("Distance:", &Agent::distAlternate, 0.0f, 4, [&]() {
            *groups[currentGroup].settings[currentSetting - 1].val *= -1.0f;
            colorAlternateTimer.restart();
        }),
        Setting("\tR Distance:", &Agent::distR, 1.0f, 2, [&]() {}),
        Setting("\tG Distance:", &Agent::distG, 1.0f, 2, [&]() {}),
        Setting("\tB Distance:", &Agent::distB, 1.0f, 2, [&]() {}),
        Setting("\tR Period:", &Agent::distPeriodR, 0.1f, 0, [&]() {}),
        Setting("\tG Period:", &Agent::distPeriodG, 0.1f, 0, [&]() {}),
        Setting("\tB Period:", &Agent::distPeriodB, 0.1f, 0, [&]() {}),
    };
    
    groups[4].settings = {
        Setting("Input Device:", &deviceIndex, 1.0f, 5, deviceNames, [&]() {

            if (deviceIndex >= inputDevices.size()) deviceIndex = 0;
            if (deviceIndex < 0) deviceIndex = inputDevices.size() - 1;

            deviceId = inputDevices[deviceIndex];
            RtAudioErrorType error;

            if (adc.isStreamRunning())
                adc.stopStream();

            if (adc.isStreamOpen())
                adc.closeStream();
            
            parameters.deviceId = inputDevices[deviceIndex];

            if (Agent::audioAlternate > 0) {
                adc.openStream(nullptr, &parameters, RTAUDIO_FLOAT32, AUDIO_FREQUENCY, &bufferFrames, &recordCallback, (void*)&AUDIO_BUFFER);
                adc.startStream();
            }
        }),
        Setting("Enable:", &Agent::audioAlternate, 0.0f, 4, [&]() {
            *groups[currentGroup].settings[currentSetting - 1].val *= -1.0f;
            if (Agent::audioAlternate > 0) {

                if (adc.isStreamRunning())
                    adc.stopStream();

                if (adc.isStreamOpen())
                    adc.closeStream();

                parameters.deviceId = inputDevices[deviceIndex];

                adc.openStream(nullptr, &parameters, RTAUDIO_FLOAT32, AUDIO_FREQUENCY, &bufferFrames, &recordCallback, (void*)&AUDIO_BUFFER);
                adc.startStream();

            } else {
                if (adc.isStreamRunning())
                    adc.stopStream();
                if (adc.isStreamOpen())
                    adc.closeStream();
            }
        }),

        Setting("\tR Factor:", &rFac, 0.01f, 0, [&]() {}),
        Setting("\tR Low:", &frequencies[0][0], 1.00f, 2, [&]() {
            if (frequencies[0][0] < 0) frequencies[0][0] = 0;
            if (frequencies[0][0] > AUDIO_FREQUENCY) frequencies[0][0] = AUDIO_FREQUENCY;
        }),
        Setting("\tR High:", &frequencies[0][1], 1.00f, 2, [&]() {
            if (frequencies[0][1] < 0) frequencies[0][1] = 0;
            if (frequencies[0][1] > AUDIO_FREQUENCY) frequencies[0][1] = AUDIO_FREQUENCY;
        }),

        Setting("\tG Factor:", &gFac, 0.01f, 0, [&]() {}),
        Setting("\tG Low:", &frequencies[1][0], 1.00f, 2, [&]() {
            if (frequencies[1][0] < 0) frequencies[1][0] = 0;
            if (frequencies[1][0] > AUDIO_FREQUENCY) frequencies[1][0] = AUDIO_FREQUENCY;
        }),
        Setting("\tG High:", &frequencies[1][1], 1.00f, 2, [&]() {
            if (frequencies[1][1] < 0) frequencies[1][1] = 0;
            if (frequencies[1][1] > AUDIO_FREQUENCY) frequencies[1][1] = AUDIO_FREQUENCY;
        }),

        Setting("\tB Factor:", &bFac, 0.01f, 0, [&]() {}),
        Setting("\tB Low:", &frequencies[2][0], 1.00f, 2, [&]() {
            if (frequencies[2][0] < 0) frequencies[2][0] = 0;
            if (frequencies[2][0] > AUDIO_FREQUENCY) frequencies[2][0] = AUDIO_FREQUENCY;
        }),
        Setting("\tB High:", &frequencies[2][1], 1.00f, 2, [&]() {
            if (frequencies[2][1] < 0) frequencies[2][1] = 0;
            if (frequencies[2][1] > AUDIO_FREQUENCY) frequencies[2][1] = AUDIO_FREQUENCY;
        })
    };


    RectangleShape guiBase;
    Vector2f guiPos(0, 0);
    guiBase.setFillColor(Color(50, 50, 50, 150));
    guiBase.setSize(Vector2f(240, 545));
    guiBase.setPosition(guiPos);

    RectangleShape selectedHighlight;
    selectedHighlight.setFillColor(Color(100, 100, 100, 150));
    selectedHighlight.setSize(Vector2f(240, 20));

    for (int g = 0; g < groups.size(); g++) {
        groups[g].groupText = Text(groups[g].name, font, 20);
        groups[g].groupText.setFillColor(Color::Yellow);
        groups[g].groupText.setPosition(Vector2f(guiBase.getPosition().x, guiBase.getPosition().y + 30));
        for (int s = 0; s < groups[g].settings.size(); s++) {
            groups[g].settings[s].settingText = Text(groups[g].settings[s].name, font, 20);
            groups[g].settings[s].settingText.setFillColor(Color::White);
            groups[g].settings[s].settingText.setPosition(Vector2f(guiBase.getPosition().x, guiBase.getPosition().y + 30 * (s + 2)));
            groups[g].settings[s].valText = Text(getSettingString(
                    *groups[g].settings[s].val,
                    groups[g].settings[s].rule,
                    groups[g].settings[s].mappedVals
                ), font, 20);
            groups[g].settings[s].valText.setFillColor(Color::White);
            groups[g].settings[s].valText.setPosition(Vector2f(guiBase.getPosition().x + 160, guiBase.getPosition().y + 30 * (s + 2)));
        }
    }

    selectedHighlight.setPosition(groups[0].groupText.getPosition());


    bool settingAltered = false;
        bool settingSelected = false;
        while (window.pollEvent(event)) {

            if (event.type == Event::Closed) {
                window.close();
                break;
            }
                
            if (event.type == Event::KeyPressed) {

                //setting manipulation
                float multiplier = 1;
                multiplier *= Keyboard::isKeyPressed(Keyboard::LShift) ? 10 : 1;
                multiplier *= Keyboard::isKeyPressed(Keyboard::LControl) ? 10 : 1;
                if (event.key.code == Keyboard::Right) {
                    if (currentSetting == 0) {
                        currentGroup = ((currentGroup + 1) % groups.size());
                    }
                    else {
                        settingAltered = true;
                        *groups[currentGroup].settings[currentSetting - 1].val += groups[currentGroup].settings[currentSetting - 1].delta * multiplier;
                    }
                }
                if (event.key.code == Keyboard::Left) {
                    if (currentSetting == 0) {
                        currentGroup = ((currentGroup - 1) < 0 ? groups.size() - 1 : currentGroup - 1);
                    }
                    else {
                        settingAltered = true;
                        *groups[currentGroup].settings[currentSetting - 1].val -= groups[currentGroup].settings[currentSetting - 1].delta * multiplier;
                    }
                }
                if (event.key.code == Keyboard::Up) {
                    settingSelected = true;
                    currentSetting = (currentSetting - 1 < 0 ? groups[currentGroup].settings.size() : currentSetting - 1);
                }
                if (event.key.code == Keyboard::Down) {
                    settingSelected = true;
                    currentSetting = (currentSetting + 1) % (groups[currentGroup].settings.size() + 1);
                }

                //hide gui
                if (event.key.code == Keyboard::H) {
                    hideGUI = !hideGUI;
                }

                //reset view
                if (event.key.code == Keyboard::R) {
                    view.setCenter(Vector2f(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2));
                    view.setSize(Vector2f(WINDOW_WIDTH, WINDOW_HEIGHT));
                    accZoom = 1;
                    worldTex.setView(view);
                }
            }

            //view zooming
            if (event.type == Event::MouseWheelScrolled)
            {
                if (event.mouseWheelScroll.delta > 0) {
                    view.zoom(0.9f);
                    accZoom *= 0.9f;
                } else {
                    view.zoom(1.1f);
                    accZoom *= 1.1f;
                }
                worldTex.setView(view);
            }
        }

        if (settingAltered || settingSelected) {
            if (settingAltered && currentSetting != 0) 
                groups[currentGroup].settings[currentSetting - 1].action();

            if (settingSelected) {
                if (currentSetting == 0) 
                    selectedHighlight.setPosition(groups[currentGroup].groupText.getPosition());
                else
                    selectedHighlight.setPosition(groups[currentGroup].settings[currentSetting - 1].settingText.getPosition() + Vector2f(0, 2));
            }

            if (currentSetting != 0) {

                groups[currentGroup].settings[currentSetting - 1].valText.setString(
                    getSettingString(*groups[currentGroup].settings[currentSetting - 1].val,
                        groups[currentGroup].settings[currentSetting - 1].rule,
                        groups[currentGroup].settings[currentSetting - 1].mappedVals
                    )
                );
            }
        }


        if (!hideGUI) {
                window.draw(guiBase);
                window.draw(selectedHighlight);
                window.draw(fpsCounter);
                window.draw(groups[currentGroup].groupText);
                for (int i = 0; i < groups[currentGroup].settings.size(); i++) {
                    window.draw(groups[currentGroup].settings[i].settingText);
                    window.draw(groups[currentGroup].settings[i].valText);
                }
                if(currentGroup == 0) for (int i = 0; i < 3; i++) {
                    window.draw(searchPreview[i]);
                }
            }